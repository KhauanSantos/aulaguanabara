IMAGENS NO FUNDO DO SITE

*******************************

Podemos usar imagens como Plano de Fundo em sites. Essas imagens de fundo podem ser inseridas como o background de div's e do body (que também é uma caixa). Dessa forma, basicamente todo elemento que é uma caixa, todo elemento visual que funciona como uma caixa, pode receber uma imagem de fundo. 

Para fazer isso, usamos a Propriedade de Estilo " background-image " (a mesma usada para degradê) com a função " url "... Após isso é só inserir o endereço da imagem dentro dos (parênteses). Exemplo:

div {
         background-image: url(imagens/pattern003.png);
     }

Observação: No VALOR da função " url " da propriedade " background-image ", existe a possibilidade de colocarmos o link de uma imagem ao invés de um endereço local de imagem dentro dos parênteses. Mas cuidado, caso a imagem do link saia do ar e deixe de existir, isso irá prejudicar o visual do seu site, visto que não teremos mais acesso à essa imagem.

De forma PADRÃO, imagens de fundo sempre serão carregadas no seu tamanho/dimensão total. Se a imagem de fundo que inserirmos tiver uma dimensão menor do que o respectivo elemento caixa, ela simplesmente será  introduzida de forma "repetida", em blocos, para conseguir cobrir toda a área. Já se essa imagem tiver uma dimensão muito grande para o elemento caixa, veremos apenas um pedaço da mesma como background... Ela será "cortada" em um tamanho suficiente para cobrir o fundo desse elemento... Como foi dito, tudo isso de forma padrão. 

Uma imagem que é carregada como background (imagem de fundo), NÃO faz parte do seu conteúdo em si... Ela é simplesmente uma imagem que está sendo exibida sem sentido semântico, unicamente para fins visuais e de design.

Lembre-se, muito cuidado com o tamanho das imagens de fundo que você inserir (peso do arquivo - KB, MB), se você trabalhar com imagens em resolução muito alta o seu site irá ficar lento. Então ajuste a resolução, peso do arquivo e suas medidas de forma que não prejudique o carregamento do seu site. Caso contrário ele não será valorizado pelos principais mecanismos de busca.

**********************************

A imagem se repetirá automaticamente, em seu tamanho padrão, mas conseguimos personalizar isso com a propriedade 'background-repeat' e que sustenta alguns valores: 


background-repeat: no-repeat -> sem repetição (apenas 1 imagem)
	           repeat-x; -> repetição na horizontal
		   repeat-y -> repetição na vertical

Repetição de imagem: (a partir do canto superior esquerdo);

**********************************

POSIÇÃO DA IMAGEM 

Além de escolher o nível de repetição do background, também podemos mudar a posição de referência de início das repetições. Por padrão, é considerado o canto esquerdo superior (left top), mas podemos ter várias opções, como por exemplo:

	left top  |    center top    | right top
	
       left center | center center | right center
	
       left bottom | center bottom | right bottom
	
**********************************


Podemos redimensionar as imagens para forçá-la a caber na caixa. Por padrão, nenhum redimensionamento será aplicado, e a imagem será exibida do seu tamanho natural. Porém, Podemos usar  a propriedade 'background-size' ) para alterar esse comportamento. 

O valores aceitos por essa propriedade são:

auto - (padrao) a imagem de fundo será aplicada em seu tamanho original. Dessa forma, normalmente a imagem fica com quebras de repetição ou bordas no background, ocasionando em um resultado não responsivo. 


*

[length] px - Redimensiona a largura da imagem e faz a altura se adaptar automaticamente. 
[length] % - Podemos também informar as duas dimensões na sequência ou também usar valores percentuais.

OBS: É importante destacar que, caso configuremos o tamanho da nossa imagem com esse tipo de valor (largura x altura), a dimensão especificada para a imagem será fixa na tela independentemente do tamanho da viewport (navegador), resultando em páginas não responsivas, em quebras de repetição ou bordas no background. 

É possível "contornar" isso inserindo valores em % (ex: 100% 100%)... Mas dessa forma, apesar de resolver o problema das quebras de repetição ou bordas no fundo, a nossa imagem ficará DISTORCIDA. Por isso não é muito recomendado usar esse tipo de valor (largura x altura) aplicado para o background, nem mesmo em %.

*

cover - Muda o tamanho da imagem para que ela seja sempre totalmente exibida na tela, sem nenhum corte. Dessa forma, geralmente  a imagem também fica com quebras de repetição ou bordas no background, ocasionando em um resultado não responsivo.


contain - Redimensiona a imagem para que ela cubra o contêiner, mesmo que para isso ocorram alguns eventuais cortes. Ele vai cobrir a tela inteira, independentemente do tamanho dessa tela, mesmo que pra isso tenha que cortar um pouco a imagem. Esse valor é o mais recomendado para se obter resultados responsivos.

*

No fim das contas, não existe um valor absoluto que é sempre melhor que o outro, tudo vai depender do que você quer fazer.

Se o conteúdo da nossa página for grande o suficiente para criar uma barra de rolagem, mesmo que a nossa imagem de fundo esteja corretamente configurada com um "background-size" valor "cover" e outras propriedades, ao scrollar para baixo, a imagem de fundo vai ter um comportamento de quebra de repetição ou borda no background... Mais adiante vamos ver como evitar isso.

Observação: Quando usamos imagens de fundo, é natural pensarmos que não é necessário configurar uma cor de fundo... Entretanto, é sim recomendável que você configure uma cor de fundo, mesmo que posteriormente aplique uma imagem de fundo por cima dessa cor. 

Isso porque quando o nosso site é carregado, primeiro é carregado o conteúdo HTML, sendo interpretado pelo navegador, e só depois é que as imagens são encaminhadas. Primeiro chega o texto e depois as imagens... Então durante esse processamento, principalmente se o seu servidor estiver lento, pode ser que ele carregue o site (texto), e a imagem de fundo (que é um arquivo um pouco mais pesado) demore alguns segundos para ser exibida. 

Sendo assim, não é recomendado que você mostre o site branco e depois a imagem apareça... O ideal é que você coloque uma cor no fundo para que o usuário consiga já ir consumindo o conteúdo e aí sim posteriormente a imagem seja exposta.

**********************************

Temos também a propriedade de vínculo (attachment) da imagem com o resto do documento, usamos essa propriedade em casos de o conteúdo ser maior que a altura da página e seja necessário fazer uma rolagem vertical. 

Ela suporta os seguintes valores:

scroll - (padrao) a imagem de fundo vai rolar junto com o conteúdo.

fixed - a imagem de fundo vai ficar fixada enquanto o conteúdo vai sendo rolado.

**********************************

SIMPLIFICANDO AS COISAS

Existe uma possibilidade de usarmos uma shorthand (atalho) para essas propriedades também. As ordens de agrupamento para a abreviação dessas propriedades seria:

* background-color
* background-image
* background-position
* background-repeat
* background-attachment

Reunimos elas com a declaração dessa forma:

background: cor / endereço da imagem / posição da imagem / repetição da imagem / attachment da imagem

OBS: **NÃO FOI UTILIZADO A PROPRIEDADE 'SIZE', POIS ELA AINDA NÃO FUNCIONA NO SHORTHAND, MESMO SENDO UMA REGRA OFICIAL DA W3C. PARA UTILIZA-LÁ, DEVEMOS COLOCAR DE FORMA SEPARADA.

**********************************

CENTRALIZAÇÃO VERTICAL DE CONTAINERES

Quando queremos centralizar um bloco horizontalmente, aprendemos a usar o margin:auto; nas folhas de estilo. Mas como fazer a centralização vertical?

Quando criamos nosso mini-projeto, tivemos que arrumar uma maneira de centralizar e redimensionar um vídeo dentro do container. Agora vou te mostrar outra técnica.

Vamos começar criando uma hierarquia simples entre dois blocos: 

<section id="container">
        <article id="conteudo">
        </article>
    </section>

Agora, vamos criar as configurações personalizadas para a <section> e <article> dentro da área <style> na área da cabeça <head> do código:

#container {
            height: 700px;
            background-color: purple;
            padding: 10px;
        }

        #conteudo {
            height: 200px;
            width: 300px;
            background-color: yellow;
        }

O nosso objetivo aqui é deixar o retângulo interno exatamente no meio do retângulo externo. Vamos começar configurando o posicionamento de cada uma. 

#container {
            position: relative;
	 }

#conteudo {
            position: absolute;
	 }

**O CONTAINER (LADO DE FORA) VAI TER UMA POSIÇÃO RELATIVA, OU SEJA, ELE JÁ É RELATIVO POR PADRÃO. JÁ O CONTEÚDO (PARTE DE DENTRO) TERÁ A POSIÇÃO ABSOLUTA. 

QUANDO COLOCAMOS O POSICIONAMENTO ABSOLUTO EM UM CONTEUDO, PODEMOS CONFIGURAR DUAS PROPRIEDADES MUITO IMPORTANTES, QUE SÃO LEFT E TOP;

Por exemplo: 

#conteudo {
            position: absolute;
            height: 200px;
            width: 300px;
            background-color: yellow;

            left: 300px;
            top: 200px;
        }

O left de 300px é a distancia que vai desde a borda da esquerda do container até ao canto superior esquerdo do conteúdo. 

O top de 200px é a distancia que vai desde a borda de cima do container até ao canto superior esquerdo do conteúdo.

OBS: Essa propriedade é recomendada o uso de %, portanto NÃO UTILIZAREMOS PX COM ELA. 

Iremos configurar left e top com o valor de 50%: 

            left: 50%;
            top: 50%;

Feito isso, a nossa caixa interna será centralizada verticalmente. 

É IMPORTANTE DESTACAR: Com essa configuração, o elemento interno realmente será alinhado pelo centro, mas tendo como referência o CANTO SUPERIOR ESQUERDO DA CAIXA FILHO... resultando especificamente no alinhamento desse ponto (canto superior esquerdo da box) e não da caixa como um todo.

Para resolver isso, devemos mudar a posição do "ponto de alinhamento" da caixa filho para o CENTRO da box. Sendo que por padrão, como já vimos, esse ponto é no canto superior esquerdo. 

Para transformar o "ponto de alinhamento" de uma caixa (mover a caixa), usamos a Propriedade de Estilo " transform ".

Utilizando a propriedade transform é possível manipular visualmente um elemento (mover, rotacionar, dimensionar e etc). 

As funções mais usadas para o transform são: rotate, scale, skew e translate. Para centralizar o "ponto de alinhamento" na nossa box, iremos usar a função "translate".

translate - A função de translate serve para mover o elemento para os lados ou para cima/baixo. Mudar o seu "ponto de alinhamento"... A sintaxe pode ser especifica para um dos eixos x/y ( translateX ou translateY ), como pode ser apenas translate, abrangendo os dois eixos ( x, y ). Obs.: Para ir para o lado esquerdo ou para cima, use valores negativos.

rotate - Como o nome já sugere, é utilizada para rotacionar o elemento, de 0 a 360 graus. Utilizando valores positivos, a rotação será realizada no sentido horário e, utilizando valores negativos, no sentido Anti-horário.

scale - Utilizado para redimensionar os elementos, tendo como escala padrão o valor "1". Valores maiores que 1, aumentarão o tamanho do elemento, e valores menores que 1 diminuirão sua escala.

skew - É utilizado para "distorcer" os elementos, alterando os ângulos.

Nota: A propriedade de estilo "transform" e suas funções é muito utilizada juntamente com a pseudo-classe "hover" e com a propriedade de estilo "transition" para criar efeitos visuais.

Entendido o conceito do transform e suas funções, usaremos a seguinte declaração para mudar/centralizar o "ponto de alinhamento" da nossa box filho: 

transform: translate(-50%, -50%);

Como queremos posicionamento centralizado, na função "translate" inserimos valores negativos de "-50% -50%" para deslocar o "ponto de alinhamento" da nossa caixa filho (metade do container... centro). O PRIMEIRO VALOR representa o deslocamento horizontal do ponto, e o SEGUNDO VALOR representa o deslocamento vertical desse ponto. 

Utilizamos valores em % para ajustar o ponto de referência exatamente no meio da box (-50% -50%), mas dependendo do que você quer fazer, também pode usar valores em px ou outra unidade de medida.

OBS: Lembrando que aquilo que de fato está centralizando a caixa são os Positions e suas Propriedades Auxiliares (left e top), a propriedade transform apenas mudou o ponto de referência da caixa filho.

O código ficará assim: 

#container {
            background-image: url('imagens/target001.png');
            background-size: 100% 100%;

            position: relative;
            height: 95vh;
            background-color: purple;
            padding: 10px;
        }

        #conteudo {
            background-image: url('imagens/target001.png');
            background-size: 100% 100%;

            position: absolute;
            height: 200px;
            width: 300px;
            background-color: yellow;

            left: 50%;
            top: 50%;

            transform: translate(-50%, -50%);
        }

Essa é apenas uma das técnicas de centralização de conteúdo, existem outras que requerem aprender conceitos mais aprofundados das folhas de estilo, como as caixas flexíveis (Flexbox).

