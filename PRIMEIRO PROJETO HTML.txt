PRIMEIRO PROJETO HTML

Quando vamos iniciar um projeto, antes de começarmos a mexer no código, é essencial que façamos um planejamento de como vai ser a estrutura desse site. O planejamento de um site é algo muito importante, tão importante que inclusive existem algumas ferramentas de planejamento de sites.

Na prática, para fazer o planejamento, temos que ter em mente três itens:

1) - Layout do Site
2) - Paleta de Cores do Site
3) - Fontes de Texto do Projeto

LAYOUT:

Devemos prototipar a estrutura do layout do nosso site através de um " Mock " ou " Wireframe ", ambos tem funções bem semelhantes:

Mock: Objetos mock, objetos simulados ou simplesmente mock em desenvolvimento de software são objetos que simulam o comportamento de objetos reais de forma controlada, simula a estrutura básica e o formato de um site (um Mock NÃO se preocupa com cores ou imagens, mas sim somente com a forma da estrutura básica, com a modelagem).

Wireframe: Um wireframe de site web ou website wireframe é um protótipo usado em design de interface para sugerir a estrutura de um sítio web e relacionamentos entre suas páginas . Um wireframe web é uma ilustração (que pode ser colorida e conter imagens ) semelhante do layout de elementos fundamentais na interface.

A ferramenta utilizada no vídeo para elaborar a prototipação do layout do nosso projeto foi o " MockFlow ", atualmente (08/01/2023) essa ferramenta ainda está funcionando e possui todos os recursos mostrados no vídeo... Entretanto o site atualizou e agora tem uma interface inicial um pouco diferente. Como ferramenta alternativa ao "MockFlow", também existe o " Figma ".

Ao logar e entrar na ferramenta MockFlow, devemos abrir o menu da interface e começar a montar o protótipo da estrutura do nosso site, inserindo e organizando as caixas que o nosso projeto terá. 

Você deve manipular os elementos disponíveis no menu, como browsers frames, retângulos, caixas de títulos, caixas de texto, caixas de imagens e etc... Você também deve manipular a altura (height) e largura (width) desses elementos e deixar tudo isso documentado, simule cada parte da interface do site (header, nav, main, sections, articles, footer e tec) e coloque elementos dentro de outros elementos... Faça isso até formar um protótipo que considera ideal.

O modelo de layout apresentado no vídeo será usado no nosso projeto, mas lembre-se que não existe somente esse modelo e que você pode usar sua criatividade para criar seus próprios ou se inspirar em modelos de outros sites e tentar replicá-los.

PALETA DE CORES:

Devemos criar uma Paleta de Cores harmônica com a ferramenta do "Adobe Color" ou qualquer outra ferramenta já apresentada. No caso a Paleta utilizada no vídeo é monocromática, com diferentes tons de verde (cor da logo do Android).

FONTES DE TEXTO:

Devemos escolher um conjunto adequado de fontes de texto para o projeto, que podem ser padrões, externas web ou externas de forma local (baixadas). Use as ferramentas Google Fonts e uma biblioteca de fontes locais de sua preferência.

Nota: A parte do planejamento pode ser um pouco demorada, mas montar o mock, essa representação visual estruturada e simplificada do conceito do site e etc, é muito útil... Pois teremos uma ideia de como o nosso site será, isso vai te levar a montar essa diagramação muito mais facilmente lá na frente na horar de colocar a mão no código.

*********************************

No HTML, criaremos dentro do "body" a estrutura do projeto, inspirada no mock que prototipamos anteriormente... Basicamente, a organização das Grouping Tags SEMÂNTICAS do projeto foi a seguinte:
	
Estrutura básica do HTML do projeto:

<header>
	<h1></h1>
	<p></p>
</header>

<nav>
	<a href="#"></a>
	<a href="#"></a>
	<a href="#"></a>
	<a href="#"></a>
</nav>

<main>
	<article>
		<aside>
		
		</aside>
	</article>
</main>

<footer>
	<p></p>
</footer>

Tome muito cuidado na hora de montar a estrutura HTML , cuidado para não colocar as tags do lado de fora ou no lugar errado... Se você errar no HTML e os seus blocos não estão com a hierarquia certa, não adianta tentar formatar os estilos com CSS já que o HTML estará errado...

IMPORTANTE: É fundamental que um aspirante a desenvolvedor/programador mantenha o seu código sempre bem arrumado, a INDENTAÇÃO é muito importante!

Após construir a estrutura do seu site com as Grouping Tags Semânticas acima, o nosso conteúdo estará aglomerado e sem formatação, mas já estará SEMÂNTICAMENTE ORGANIZADO em caixas com uma estrutura hierárquica... Por hora não teremos efeitos visuais evidentes, mas já teremos um efeito puramente semântico da organização das nossas caixas, que serão modeladas, formatadas e estilizadas com CSS .

Já na parte do " head ", inserimos o favicon logo abaixo de "title"... Como temos uma pasta para imagens e fontes, e estamos elaborando um projeto, é importante mantermos os nossos arquivos organizados... Por isso CRIAMOS UMA PASTA ( "estilos" ) para armazenar o nosso documento CSS , que será externo ( Você pode criar a pasta "estilos" pelo próprio VSC ou no Explorador de Arquivos do projeto )

Já no nosso documento CSS a regra @charset "UTF-8" foi inserida no início do código (Regra de codificação de caracteres utilizado no documento)

Para testar se o arquivo CSS que criamos está funcionando, modifique a cor de fundo do corpo da página com a propriedade "background-color", se o corpo mudar de cor o nosso CSS está linkado e tudo funcionando como deveria.

***********************************

Em seguida, iremos fazer o envelopamento do código para deixarmos com a organização e a semântica melhor.

Iremos fazer isso em todo o conteúdo de texto do site. 

O resultado final será esse: 

<main>
        <article>
            <h1>História do Mascote do Android</h1>

            <p>Provavelmente você sabe que o sistema operacional <strong>Android</strong>, mantido pelo Google é um dos mais utilizados para dispositivos móveis em todo o mundo. Mas tavez você não saiba que o seu simpático mascote tem um nome e uma história muito curiosa? Pois acompanhe esse artigo para aprender muita coisa sobre esse robozinho.</p>

            <h2>A primeira versão</h2>

            <p>A primeira tentativa de criar um mascote surgiu em 2007 e veio de um desenvolvedor chamado <a href="https://androidcommunity.com/dan-morrill-shows-us-the-android-mascot-that-almost-was-20130103/" target="_blank">Dan Morrill</a>. Ele conta que abriu o <a href="https://inkscape.org/pt-br/" target="_blank">Inkscape</a> (software livre para vetorização de imagens) e criou sua própria versão de robô. O objetivo era apenas personificar o sistema apenas para a a sua equipe, não existia nenhuma solicitação da empresa para a criação de um mascote.</p>

            <img src="imagens/dan-droids.png" alt="Primeiro mascote do android">
            
            <p>Essa primeira versão bizarra até foi batizada em homenagem ao seu criador: seriam os <strong>Dandroids</strong>.</p>

            <h2>Surge um novo mascote</h2>

            <p>A ideia de ter um mascote foi amadurecendo e a missão foi passada para uma profissional da área. A ilustradora Russa <a href="https://www.irinablok.com" target="_blank">Irina Blok</a>, também funcionária do Google, ficou com a missão de representar o pequeno robô de uma maneira mais agradável.</p>

            <img src="imagens/irina-blok.jpg" alt="Irina block, criadora do bug-droid">

            <p>A ideia principal da Irina era representar tudo graficamente com poucos traços e de forma mais chapada. O desenho também deveria gerar identificação rápida com quem o olha. Surgiu então o <strong>Bugdroid</strong>, o novo mascote do Android.</p>

            <img src="imagens/bugdroid.png" alt="bug-droid">

            <p>A principal inspiração para os traços do novo <strong>Bugdroid</strong> veio daqueles bonequinhos que ilustram portas de banheiro para indicar o gênero de cada porta. Conta a lenda que a artista estava criando em sua mesa no escritório do <strong>Google</strong> e olhou para o lado dos banheiros e a identificação foi imediata: simples, limpo, objetivo.</p> 

            <iframe width="560" height="315" src="https://www.youtube.com/embed/l2UDgpLz20M?si=9qDwhsaUA9A-1xOO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
            
            <aside>
                <h3>Quer aprender mais?</h3>

                <p>Outro assunto curioso em relação ao Android é que cada versão sempre foi nomeada em homenagem a um doce, em ordem alfabética a partir da versão 1.5 até a 9.0.</p>

                <ul>
                    <li>1.5 - <abbr title="Bolo de copo">Cupcake</abbr></li>
                    <li>1.6 - <abbr title="Rosquinha">Donut</abbr></li>
                    <li>3.0 - <abbr title="Bomba">Eclairi</abbr></li>
                    <li>2.2 - <abbr title="Iogurte congelado">Froyo</abbr></li>
                    <li>2.3 - <abbr title="Biscoito de Gengibre">Gingerbread</abbr></li>
                    <li>3.0 - <abbr title="Favo de Mel">Honeycomb</abbr></li>
                    <li>4.0 - <abbr title="Sanduíche de Sorvete">Ice Cream Sandwich</abbr></li>
                    <li>4.1 - <abbr title="Jujuba">Jelly Bean</abbr></li>
                    <li>4.4 - <abbr title="KitKat">KitKat</abbr></li>
                    <li>5.0 - <abbr title="Pirulito">Lolipop</abbr></li>
                    <li>6.0 - <abbr title="Marshmallow">Marshmallow</abbr></li>
                    <li>7.0 - <abbr title="Torrone">Nougat</abbr></li>
                    <li>8.0 - <abbr title="Oreo">Oreo</abbr></li>
                    <li>9.0 - <abbr title="Torta">Pie</abbr></li>
                </ul>

                <p>Infelizmente, o <strong>Android Q</strong> não existiu, pois o Google resolveu pôr fim a essa divertida prática e começou a usar numerações, o que deu origem ao Android 10.</p>

                <p>Acesse aqui o site <a href="https://www.android.com/intl/en_uk/what-is-android/" target="_blank">Android History</a> para conhecer a sequência das versões "adocicadas" e o que cada uma trouxe para o sistema Android.</p>
            </aside>

            <p>Então é isso! Espero que você tenha gostado do nosso artigo com essa curiosidade sobre o sistema Android e seu simpático mascote.</p>
        </article>
    </main>
    <footer>
        <p>Site criado por <a href="https://github.com/gustavoguanabara" target="_blank">Gustavo Guanabara</a> para o CursoemVideo.</p>
    </footer>

***************************************

VARIÁVEIS EM CSS:

É possível utilizar variáveis dentro do CSS. Isso não torna a linguagem CSS uma linguagem de programação... Ela ainda continua sendo uma linguagem de marcação, assim como o HTML. Toda linguagem de programação tem variáveis, mas nem toda linguagem que tem variável é uma linguagem de programação.

As Variáveis GUARDAM VALORES para serem usados mais na frente no nosso projeto/programa. 

Por que deveríamos usar variáveis em CSS? Porque isso facilita, e muito, o nosso processo de desenvolvimento e posteriormente a manutenção do projeto , caso desejemos alterar algo no futuro... Fora que tudo fica ainda mais organizado.

Usando a Paleta de Cores de um projeto qualquer como exemplo, geralmente alguns desenvolvedores simplesmente fixam a Paleta de Cores (códigos das cores) de um site em um comentário no documento CSS, e copiam e colam esses códigos sempre que precisam alterar uma cor... Na realidade esse não é o modo mais adequado de se fazer isso e existe uma maneira muito melhor e prática de se obter um melhor resultado, com variáveis CSS.

Para declarar variáveis em CSS, devemos criar uma Pseudo-classe especial dentro do documento CSS atual, que seria uma espécie de referência dentro desse documento.

As variáveis CSS são definidas dentro da Pseudo-classe " root " ( :root {...} ). Essa pseudo-classe define as configurações para a " RAIZ DA ÁRVORE ", que vai servir para o documento inteiro . 

Tudo que colocarmos e definirmos dentro dessa pseudo-classe será válido para todo o documento, já que essa pseudoclasse (root) tem uma especificidade muito alta, ou seja, aplicado ao HTML, :root representa o elemento <html> e é idêntico ao seletor html, abrangendo todo o projeto... Dessa forma, basicamente podemos criar Variáveis "Globais" dentro de root.

Observação: Por exemplo, em linguagens de programação, normalmente temos uma "área principal", que é onde podemos declarar as nossas variáveis globais... No CSS, essa "área principal" é na Pseudo-classe root.

Todas as Variáveis em CSS tem que começar com " dois traços " ( -- ), após isso é preciso dar um nome (de sua preferência) para essa variável, posteriormente inserindo o valor da variável (código da cor nesse caso). Exemplo:

:root {
    --cor0: #ebe5c5;
    --cor1: #83e1ab;
    --cor2: #3ddc84;
    --cor3: #2fa866;
    --cor4: #1a5c37;
    --cor5: #063d1e;
}

Nota: Não cadastramos as cores branco e preto nas variáveis do exemplo, mas isso é opcional e se você quiser pode cadastrar... Já que branco e preto sempre vai estar em um site, independentemente da Paleta utilizada.

IMPORTANTE: Referente ao nome que damos para as nossas variáveis, ele é de sua preferência e você pode nomear como no exemplo acima, mas você também pode nomear de acordo com a função da variável. Por exemplo, no caso das cores da nossa Paleta, podemos nomear cada cor (variável) com o seu respectivo encargo, exemplo: "cor-de-destaque", "cor-de-fundo" e etc.

Recapitulando... Para declararmos variáveis CSS, devemos abrir um seletor para a pseudo-classe "root" (referência e raiz da árvore) no início do código CSS (logo após os códigos de regra) e posteriormente declarar as nossas variáveis ( -- ) dentro desse seletor. 

Depois de declarar as suas variáveis "globais" de cor dentro do root, na hora de formatarmos um elemento , qualquer elemento que seja, ao invés de digitar ou copiar e colar um código de cor, simplesmente usamos o atalho "Ctrl + Espaço", avançamos até o fim da lista de sugestões e lá estará a nossa Paleta de Cores declarada no root (valores guardados por variáveis)... Posteriormente basta escolher a cor desejada e adicioná-la.

Ao selecionar variáveis na lista de sugestões como valor da respectiva Propriedade, o VSC coloca a função "var(--ex-nome);" como o valor (também é possível digitar a especificação da variável ao invés de usar a lista).

O legal das variáveis é que podemos pode usá-las em quaisquer elementos e depois, se um cliente pedir por exemplo, facilmente trocar o tema do site inteiro só mudando o valor que está configurado na variável (dentro de root)... É tipo um CSS dentro do CSS, trocando o valor da variável global que está no :root, você troca no site inteiro ... Tudo que foi configurado com essa cor/variável irá ser automaticamente adaptado , sem precisar modificar propriedade por propriedade, item por item...

Lembrando que nos exemplos anteriores, usamos variáveis contendo valores de cores, mas ainda dentro do mesmo seletor root que abrimos, podemos também declarar variáveis de fontes de texto, tanto fontes padrão, externas ou locais... E tudo irá funcionar exatamente como as variáveis de cores. Exemplo:

:root {
    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: 'Bebas Neue', sans-serif;
    --fonte-android: 'Android', sans-serif;
}
---> 'Bebas Neue' e 'Android' são fontes externas e locais respectivamente, que foram configuradas como valor de variáveis.

Observação: Ao iniciarmos a configuração CSS de um novo projeto, por uma questão de organização, é muito indicado que você vá abrindo os seletores de estilização CSS de acordo com a ordem das tags da estrutura HTML , assim os seletores CSS ficarão organizados ao invés de aglomerados e completamente desordenados, e na hora de fazer alguma alteração pontual você irá se nortear de forma muito mais fácil pelo código CSS.

NOTA: Para configurar o site de forma mais organizada, podemos 'retirar' as margens e espaçamentos com o seletor global, para mais tarde, configurarmos as medidas de forma separada. 

* {
    margin: 0px;
    padding: 0px;
}

*************************

RESPONSIVIDADE PARA SITES

Largura Responsiva:

	min-width: 320px;	(tela de cel mais antigos)
	max-width: 800px;
	margin: auto;

Para imagens:

	img {
	       width: 100%
	}

   - Envelopar a <img> junto com ' source:media ' dentro da tag <picture>, para imagem dinâmica (que altera de acordo com a largura da tela). 

  Ex:  <picture>
		 <source media="(max-width:600px)" srcset="imagens/irina-blok-pq.jpg">
		 <img src="imagens/irina-blok.jpg" alt="Irina Blok">
	  </picture> 


**********

NOTA:

Quando devemos usar o sinal de maior ( " > " ) para manipular elementos que estão dentro de outros elementos (filho/children)? Talvez alguns de vocês estejam na dúvida, porque tem vezes que o Guanabara usa o sinal, e outras não... E às vezes, quando inserimos o sinal nos nossos seletores, as declarações simplesmente não tem efeito...

ESCLARECENDO:

Nesse caso, você precisa lembrar dos conceitos de COMBINADORES DE SELETORES, que nada mais é do que criar uma relação útil entre os seletores. 

Você usa o " > " quando quer indicar que deseja estilizar um FILHO DIRETO de um elemento. Segue um exemplo:

<header>
	<h1></h1>
	<p></p>
</header>

No caso do exemplo acima, o "p" é um filho direto da div especial <header>, e portanto é um elemento de Primeiro Nível. Da mesma forma, veja que o "h1" identicamente é um filho direto de header e portanto é um elemento de Primeiro Nível também. É como se <p> e <h1> fossem IRMÃOS. 

Mas quando você NÃO USA o " > ", você  quer indicar os elementos que não são necessariamente filhos, mas são DESCENDENTES. Veja outro exemplo: 

<main>
	<article>
		<h1></h1>
	</article>
</main>

SELETOR NÃO SIMPLIFICADO PARA O EXEMPLO ACIMA: " main > article > h1 {...} ". H1 é filho direto de article, que é filho direto de main. 

Tem como simplificar? Sim. Nesse caso, perceba que h1 é descendente de main (como se fosse um NETO ), então você pode DEIXAR DE USAR o " > " sem problema nenhum, dessa forma estará indicando elementos que não são necessariamente filhos, e sim descendentes. Exemplo: 

MESMO SELETOR ANTERIOR, SÓ QUE SIMPLIFICADO: " main h1 {...} "

Obs.: Se tivéssemos criado o seletor simplificado do exemplo acima, mas com o sinal " > " ( ex: main > h1 {...} ), não funcionaria porque esse h1 NÃO É FILHO DIRETO do main, e sim neto. Sendo que o sinal de maior ( ">" ) serve apenas para indicar filhos diretos.

É por isso que o Guanabara não usa o sinal de maior (>) às vezes, ele está simplificando o seletor (quando possível).

Isso facilita muito, porque você não precisará de uma pancada de classes e deixa o seu código mais limpo.


************************************

CONFIGURANDO O HEADER (CABEÇALHO)



****ALTURA MINIMA E ALINHAMENTO DO CONTEÚDO****

header {
    min-height: 150px; 
    text-align: center;
    padding-top: 40px;
}

CONFIGURANDO OS TÍTULOS DO CABEÇALHO

header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    margin-bottom: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.266);
}

header > p {
    font-family: var(--fonte-destaque);
    font-size: 1.3em;
    color: white;
    max-width: 500px;
    padding-right: 10px;
    padding-left: 10px;
    margin: auto;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.315);;
}

COR DEGRADÊ NO BACKGROUND-IMAGE LINEAR GRADIENT

header {
    background-image: linear-gradient(to bottom, var(--cor2), var(--cor5));
    min-height: 150px;
    text-align: center;
    padding-top: 40px;
}

CONFIGURANDO O MENU (NAV)

nav {
    background-color: var(--cor5);
    padding: 10px;
    text-align: center;
    box-shadow: 0px 7px 9px rgba(0, 0, 0, 0.381);
}

nav > a {
    color: white;
    padding: 10px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    transition-duration: .5s;
}


CRIANDO A TRANSIÇÃO DOS ITENS DO MENU COM A PSEUDO-CLASSE HOVER

nav > a:hover {
    background-color: var(--cor3);
    color: var(--cor5);
    padding: 7px;
    transition-duration: .5s;
}


******************************************

MELHORANDO O FORMATO DO CONTEÚDO

****corrigindo um problema prévio em uma imagem do site 

Na imagem do bugdroid, tivemos um pequeno problema de resolução, essa imagem possui a largura de 400px, e quando colocamos no estilo:

main img.pequena {
    width: 50%;
}

Deixamos a imagem muito pequena para celulares e muito grande para aparelhos maiores. 

Para corrigir esse problema, devemos apenas substituir a declaração width para max-width. 

Ficando dessa forma: 

main img.pequena {
    max-width: 350px;
} 

****configurando os parágrafos

Para configurar os parágrafos, vamos mudar algumas coisas, começando pela margem entre os textos. Deixaremos com a margem de 15px (já que com a config global que fizemos no começo, tirou todas as medidas padrões do site) em cima e em baixo e 0px ao lado esquerdo e ao lado direito. Ficando dessa forma: 

main p {
    margin: 15px 0px;
}


Em seguida, vamos alterar o alinhamento e endentação do texto, deixando de uma forma mais apresentável, sendo assim, colocaremos as seguintes declarações: 

main p {
    margin: 15px 0px;
    text-align: justify;
    text-indent: 25px;
} 

Após isso, para uma melhor visualização  e leitura dos textos, iremos espaça-los, com a guinte declaração font-size line-height:

main p {
    margin: 15px 0px;
    text-align: justify;
    text-indent: 25px;
    font-size: 1em;
    line-height: 1.7em;
}


****configurando as palavras em destaque (negrito)

Para os textos em negrito, iremos fazer algo mais simples. Apenas mudaremos a cor da fonte utilizando da declaração color: 

main strong {
    color: var(--cor4);
}

****configurando o formato dos links

Na configuração de links, primeiramente, iremos tirar o sublinhado que fica por padrão nele, usando a declaração text-decoration. Em seguida, mudamos a cor e a grossura da fonte da forma que desejar: 

main a {
    text-decoration: none;
    font-weight: bold;
    color: black;
} 
  
A seguir, iremos mudar a cor de fundo do texto, usando o background-color, junto com o padding (para deixarmos com um espaçamento agradável para a vista.

main a {
    text-decoration: none;
    font-weight: bold;
    color: black;
    background-color: var(--cor1);
    padding: 2px 4px;
}

Para finalizar os links, usaremos a pseudo-classe :hover (que muda a formatação quando passamos o mouse por cima).

main a:hover {
    text-decoration: underline;
    color: var(--cor4);
}

****configurando os títulos *****IMPORTANTE*****

Iniciamos a configuração mudando a cor da fonte do h2 para deixar diferente do h1.

main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
}

Depois, iremos mudar o tamanho da fonte do h2 para deixar menor que o h1.

main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
    font-size: 1.3em;
}

*****IMPORTANTE 

Para deixar o visual mais interessante, iremos utilizar a declaração background-image: linear-gradient (usada para gradientes coloridos).

Ficará assim: 

main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
    font-size: 1.3em;
    background-image: linear-gradient(to right, var(--cor1), transparent); /*deixará o h2 com um gradiente que vai do verde para o transparente, deixando visualmente mais interessante*/
}


***************************************************


Rodapé, conteúdo periférico e links

Configurando o conteúdo periférico (aside):

aside {
    background-color: #83e1ad;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0px 1px 6px 1px rgba(0, 0, 0, 0.545);
}

aside > h3 {
    background-color: #1a5c37;
    color: white;
    padding: 8px;
    margin: -10px -10px 0px -10px;
    border-radius: 10px 10px 0px 0px;
}

aside > ul {
    list-style-type: '\1F5F8\00A0';
    list-style-position: inside;
    columns: 2;
}


PROPRIEDADES DE ESTILO PARA LISTAS:

Segue algumas Propriedades de Estilo extras apresentadas no vídeo para usarmos dentro de seletores de listas ( ex.: ul {...} ):

Quando criamos uma lista dentro de outro elemento, dentro de um aside por exemplo, geralmente as "bolinhas" da lista (marcadores sequenciais no caso de listas ordenadas) irão ficar para fora do elemento pai (aside)... Para resolver isso e manter a lista inteira dentro do elemento pai, devemos utilizar a Propriedade de Estilo " list-style-position " com o valor " inside " (por padrão marcadores de listas são posicionados com o valor " outside "). Essa propriedade define a posição dos marcadores da lista e dessa forma as "bolinhas" ficarão para dentro do elemento pai.

Outra questão, às vezes temos uma lista com muitos itens, muito extensa... E queremos dividi-la em duas partes para manter uma formatação mais agradável... Para fazer isso, temos a Propriedade de Estilo " columns " com o valor " 2 ". Com isso iremos dividir a nossa lista em duas colunas (se quiser dividir em mais de duas colunas é só alterar o valor numérico da propriedade).

É possível trocar as "bolinhas" ou marcadores de listas por outro símbolo, um emoji por exemplo. Para fazer isso, devemos usar a Propriedade de Estilo " list-style-type "... Como valor dessa propriedade, devemos colocar entre aspas 'simples' o número do código do emoji que escolhermos (sem o "U+"), e após isso, para de fato carregar o emoji, adicionar uma contrabarra ( \ ) antes do código do emoji e ainda dentro das aspas 'simples'. Obs.: A troca de símbolos de lista não é 100% compatível com todos os navegadores.

Uma coisa que pode acontecer é o nosso símbolo ficar "grudado" no item da lista, para evitar isso é indicado acrescentar um "espaço" entre o emoji e o item de lista. Para fazer isso, ainda dentro das aspas 'simples' e DEPOIS do código do emoji, acrescente outra contrabarra ( \ ) e logo após isso o código " 00A0 " ou " 0020 " (comando de espaço ). Se você quiser, pode inserir mais de um espaço, é só repetir o processo. Obs.: Sempre que você quiser dar um "espaço" ou inserir emojis pelo CSS, para qualquer outro elemento e não somente listas, faça como foi orientado nesse texto. 

Exemplo geral:

ul {
    list-style-position: inside;
    columns: 2;
    list-style-type: '\1F5F8\00A0\00A0';
}

Nota: Ainda existem muitas outras Propriedades de Estilo para listas além dessas três apresentadas no vídeo e descritas nesse texto.

******************************************

MARGIN NEGATIVA:

No nosso projeto, dentro da área " Saiba Mais " (aside), formatamos o nosso h3 de um jeito que parece que o subtítulo faz parte do topo da caixa. Para fazer isso, inicialmente atribuímos um destaque de cores ao subtítulo e adicionamos um pequeno padding de 10px no mesmo... 

O resultado desejado seria que a caixa do h3 crescesse para "fora" e ocupasse a exata forma do topo da caixa do aside, resultando no efeito descrito.

Para isso, configuramos as margins laterais e superior do nosso h3 com um valor negativo de -10px, dessa forma a caixa do h3 irá crescer para "fora" e ocupará a forma do topo da caixa aside. A margin (espaçamento externo) foi configurada com um valor negativo, na prática essa margin está indo para dentro e se expandindo de forma inversa, abrangendo o topo do aside. Uma mesma configuração com um valor positivo no margin não daria o mesmo efeito.

Para fechar, posteriormente é só fazer o arredondamento da parte de cima da caixa do h3, para ficar condizente com a parte inferior da nossa caixa aside.

**************************************

Configurando o footer:

footer {
    background-color: var(--cor5);
    color: white;
    text-align: center;
    font-size: 0.9em;
    padding: 4px;
}

footer a {
    text-decoration: none;
    font-weight: bolder;
    color: white;
}

footer a:hover {
    color: white;
    background-color: #3ddc84;
    padding: 2px;
    border-radius: 4px;
    transition-duration: 0.9ms;
}

**************************************

Configurando os links:


a.externo::after {
    content: '\00A0\1F517';
}

Essa declaração fará com que os links fiquem com um emoji ao lado. 


**************************************


ADAPTAÇÕES E ALTERAÇÕES FINAIS

****

Deixando os títulos mais leves e legíveis, e faremos isso alterando algumas propriedades com a declaração font-weight e font-size. 

Antes das alterações: 

header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    margin-bottom: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.266);;
}


main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
    font-size: 1.3em;
    background-image: linear-gradient(to right, var(--cor1), transparent); /*deixará o h2 com um gradiente que vai do verde para o transparente, deixando visualmente mais interessante*/
}


header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    margin-bottom: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.266);;
}

Após as alterações: 

header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    font-weight: normal; ******
    margin-bottom: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.266);;
}

main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
    font-size: 1.3em;
    font-weight: normal; ******
    background-image: linear-gradient(to right, var(--cor1), transparent); /*deixará o h2 com um gradiente que vai do verde para o transparente, deixando visualmente mais interessante*/
}

header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    font-weight: normal; ******
    margin-bottom: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.266);;
}


**************************************


CONFIGURANDO O VIDEO 

Primeiro, iremos envelopar a tag iframe com uma div, nessa div colocaremos a class "vídeo".  Logo após isso, iremos configurar as medidas para deixar o vídeo centralizado	

div.video {
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px; /*margin para separar o conteúdo de forma igualitária (os px negativos são usados para deixar o elemento colado a borda ou contéudo*/
    padding: 20px; 
    padding-bottom: 56.6%;
    position: relative;
}

div.video > iframe {
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
}



PROPRIEDADE DE ESTILO - POSITION:

O posicionamento padrão de todo elemento no HTML é o "estático". Todo elemento estático é posicionado no canto superior esquerdo no corpo do documento ou do elemento onde ele está contido. Esta é a posição 0 de um elemento no corpo do documento.

A Propriedade de Estilo " position " é utilizada para determinar o posicionamento e hierarquia dos elementos na página do documento.

PROPRIEDADES AUXILIARES DO POSITION:

A Propriedade de Estilo "position" vem ACOMPANHADA e é usada em conjunto com quatro outras propriedades auxiliares (são propriedades e NÃO valores para position), que são: 

top - (topo) 

bottom - (baixo)

right - (direita)

left - (esquerda)

Essas quatro propriedades irão determinar a localização final do objeto, irão deslocar o elemento conforme for especificado.

Por exemplo, se usamos a propriedade "top" com o valor de 20px em um elemento, o mesmo vai se deslocar do topo num total de 20px para baixo.

VALORES DA PROPRIEDADE POSITION:

Para a propriedade position, é possível atribuir 5 valores, que são: static, relative, absolute, fixed e sticky.

Funções dos valores mais usados:

static - (estático):

O valor padrão da propriedade position é o static. Se não determinarmos nada, é esse valor que vai prevalecer por "debaixo dos panos". Ele não indica posicionamento algum, ou seja, é o valor para "nenhum posicionamento específico" do elemento. A função dele é manter a hierarquia de posicionamento conforme já estabelecido no documento HTML.

Isso significa que aquelas quatro outras propriedades já citadas (top, bottom, left e right) não funcionarão, não irão alterar a posição do elemento se usadas juntamente com esse valor... Visto que o position já está como "static" por padrão.

relative - (relativo):

O valor relative posiciona um elemento em relação à sua posição "normal"... Ou seja, as quatro propriedades auxiliares (top, bottom, left e right) vão fazer com que o elemento seja ajustado A PARTIR DA SUA POSIÇÃO ORIGINAL.

Após ter definido o tipo de position (relative nesse caso), a posição do elemento é definida através das quatro propriedades auxiliares do position: top, bottom, left e right. Que indicam a distância com relação ao topo, base, esquerda e direita, respectivamente, tomando como REFERÊNCIA DE POSICIONAMENTO (no caso do valor relative) a posição original do elemento. (se não configurarmos valores de posicionamento com as propriedades auxiliares, o elemento simplesmente fica no mesmo lugar)

absolute - (absoluto):

Um elemento com o valor absolute para position vai ser disposto, com as propriedades auxiliares, de forma relativa ao seu elemento pai... DESDE QUE ESSE ELEMENTO PAI TENHA UM POSITION COM UM VALOR DIFERENTE DE "STATIC" DEFINIDO!
 
Se o elemento pai não ter um position com um valor diferente de "static" definido, o valor absolute faz com que o elemento configurado " saia " da hierarquia estabelecida pelo HTML. 

Um elemento com o position absolute é disposto em relação ao elemento de nível superior mais próximo dele que possui um position com um valor diferente de "static" definido... E como já foi dito, caso não exista nenhum elemento hierarquicamente de nível superior (pai ou "avô") que tenha um position sem ser o "static" definido, o position absolute será absoluto ao corpo da página (body).

Na prática, em elementos do tipo filho com o pai sem a propriedade position, o valor absolute "transforma" filhos de elementos em FILHOS DA PÁGINA (body). Assim, é possível posicionarmos um elemento filho (transformado) em qualquer lugar da página (fora do pai), independentemente do que temos lá. Isso pode ser útil em casos que precisamos posicionar um alerta em nossa página, por exemplo, e não queremos "quebrar" o layout. ---

Dessa forma, note que o position absolute possui dois comportamentos diferentes, que se manifestam dependendo da configuração do elemento pai ou elemento de nível superior.

Nota: Perceba que o Guanabara configurou o filho da div (iframe) com a declaração "position: absolute" e o pai (a div) com a declaração "position: relative"... Dessa forma o elemento filho (iframe) é posicionado, com as propriedades auxiliares, em relação ao seu pai (div).
